{"version":3,"sources":["Components/Header/Input/input.js","Components/Header/Profile/Profile.js","Components/Header/Slider/Slider.js","Components/Header/Header.js","App.js","serviceWorker.js","index.js","Components/Header/Profile/assets/name.png"],"names":["Input","props","react_default","a","createElement","className","name","type","placeholder","Image","Styled","img","_templateObject","Profile","src","Imagesource","alt","Button","button","Slider_templateObject","MySlider","div","_templateObject2","Slider","id","onClick","document","getElementById","style","width","marginRight","MyHeader","header","Header_templateObject","Header","input","Header_Profile_Profile","Header_Slider_Slider","App","Components_Header_Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","__webpack_require__","p"],"mappings":"iOAYeA,EAVD,SAACC,GACb,OACEC,EAAAC,EAAAC,cAAA,SACEC,UAAWJ,EAAMI,UACjBC,KAAML,EAAMK,KACZC,KAAMN,EAAMM,KACZC,YAAaP,EAAMO,oNCJzB,IAAMC,EAAQC,IAAOC,IAAVC,KAYIC,EAHC,WACd,OAAOX,EAAAC,EAAAC,cAACK,EAAD,CAAOK,IAAKC,IAAaC,IAAI,ubCXtC,IAAMC,EAASP,IAAOQ,OAAVC,KAONC,EAAWV,IAAOW,IAAVC,KAoCCC,EApBA,SAACtB,GASd,OACEC,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,WACNtB,EAAAC,EAAAC,cAACa,EAAD,CAAQQ,QAXd,WACEC,SAASC,eAAe,QAAQC,MAAMC,MAAQ,QAC9CH,SAASC,eAAe,WAAWC,MAAME,YAAc,QASnD,WACA5B,EAAAC,EAAAC,cAAA,OAAKoB,GAAG,OAAOnB,UAAU,OACvBH,EAAAC,EAAAC,cAACa,EAAD,CAAQQ,QAThB,WACEC,SAASC,eAAe,QAAQC,MAAMC,MAAQ,IAC9CH,SAASC,eAAe,WAAWC,MAAME,YAAc,MAOjD,2nBClCV,IAAMC,EAAWrB,IAAOsB,OAAVC,KAkDCC,EAjBA,WACb,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,UACAH,EAAAC,EAAAC,cAAC+B,EAAD,CACE9B,UAAU,QACVG,YAAY,WACZD,KAAK,OACLD,KAAK,WAEPJ,EAAAC,EAAAC,cAACgC,EAAD,OAEFlC,EAAAC,EAAAC,cAACiC,EAAD,cCxCSC,MARf,WACE,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP5C,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,WAAP,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,OAEFtB,SAASC,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,8BEzI5BC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3ebc5bbf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = (props) => {\r\n  return (\r\n    <input\r\n      className={props.className}\r\n      name={props.name}\r\n      type={props.type}\r\n      placeholder={props.placeholder}\r\n    />\r\n  );\r\n};\r\nexport default Input;\r\n","import React from 'react';\r\nimport Imagesource from './assets/name.png';\r\nimport Styled from 'styled-components';\r\n\r\nconst Image = Styled.img`\r\nborder-radius:50%;\r\nalign:right;\r\nmargin-left:20%;\r\nwidth:50px;\r\nheight:50px;\r\nbox-shadow:0 2px 15px;\r\n`;\r\n\r\nconst Profile = () => {\r\n  return <Image src={Imagesource} alt=\"\" />;\r\n};\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Styled from 'styled-components';\r\n\r\nconst Button = Styled.button`\r\nfont-family:sans-serif;\r\nfont-size:1.3em;\r\nborder:none;\r\n\r\nborder-radius:5px;`;\r\n\r\nconst MySlider = Styled.div`\r\n.nav {\r\n  height: 100%;\r\n  width: 0;\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 20;\r\n  right: 0;\r\n  background-color: #0c0b10;\r\n  opacity: 0.9;\r\n  overflow-x: hidden;\r\n  padding-top: 60px;\r\n  transition: 0.7s;\r\n}\r\n`;\r\n\r\nconst Slider = (props) => {\r\n  function openSilde() {\r\n    document.getElementById('menu').style.width = '450px';\r\n    document.getElementById('content').style.marginRight = '0px';\r\n  }\r\n  function CloseSlide() {\r\n    document.getElementById('menu').style.width = '0';\r\n    document.getElementById('content').style.marginRight = '0';\r\n  }\r\n  return (\r\n    <MySlider>\r\n      <div id=\"content\">\r\n        <Button onClick={openSilde}>Clickme</Button>\r\n        <div id=\"menu\" className=\"nav\">\r\n          <Button onClick={CloseSlide}>Close me</Button>\r\n        </div>\r\n      </div>\r\n    </MySlider>\r\n  );\r\n};\r\nexport default Slider;\r\n","import React from 'react';\r\nimport Input from './Input/input';\r\nimport Styled from 'styled-components';\r\nimport Profile from './Profile/Profile';\r\nimport Slider from './Slider/Slider';\r\n\r\nconst MyHeader = Styled.header`\r\ndisplay:flex;\r\nheight:15vh;\r\nbackground:#000000;\r\ncolor:#fff;\r\nalign-items:center;\r\nborder-top-left-radius: 25px;\r\nborder-top-right-radius: 25px;\r\nborder-bottom:1px solid #999;\r\n\r\n\r\n.input{\r\n    font-size:25px;\r\n    background:#262626;\r\n    margin-left:25%;\r\n    border:hidden;\r\n    height:7.5vh;\r\n    border-radius:7.5px;\r\n    width:30%;\r\n    \r\n}\r\n.input::placeholder{\r\n align-items:center;\r\n}\r\ndiv{\r\n    font-size:25px;\r\n    font-weight:700;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    text-transform:uppercase;\r\n    margin-left:5%;\r\n}\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <MyHeader>\r\n        <div className=\"name\">Halido</div>\r\n        <Input\r\n          className=\"input\"\r\n          placeholder=\"Search..\"\r\n          type=\"text\"\r\n          name=\"search\"\r\n        />\r\n        <Profile />\r\n      </MyHeader>\r\n      <Slider />\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from 'react';\nimport Header from './Components/Header/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/name.d0fd43f2.png\";"],"sourceRoot":""}